Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562 [foreign key : business_id]
iii. Category = 2643 [foreign key : business_id]
iv. Attribute = 1115 [foreign key : business_id]
v. Review = 8090 [foreign key : business_id] , 9581 [foreign key : user_id]
vi. Checkin = 493 [foreign key : business_id]
vii. Photo = 6493 [foreign key : business_id]
viii. Tip = 3979  [foreign key : business_id] , 537 [foreign key : user_id]
ix. User = 10000
x. Friend = 11 [foreign key : user_id]
xi. Elite_years = 2780  [foreign key : user_id]

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Ans: No
	
	SQL code used to arrive at answer:
		
		select 	* 
		from 	user
		where 	null in (	id, name,      review_count,    yelping_since,
							useful, funny,     cool, fans,      average_stars,
							compliment_hot,    compliment_more, compliment_profile,
							compliment_cute,   compliment_list, compliment_note, 
							compliment_plain,  compliment_cool, compliment_funny,
							compliment_writer, compliment_photos)
	
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
		
		/*To fetch list of cities with max review count, connecting BUSINESS and REVIEW tables*/

		select 		b.city  
		from 		review as r
		inner join 	business as b on b.id = r.business_id
		group by 	b.city
		order by 	count(r.id) DESC 
	
	
	Copy and Paste the Result Below:
		+-----------------+
		| city            |
		+-----------------+
		| Las Vegas       |
		| Phoenix         |
		| Toronto         |
		| Scottsdale      |
		| Henderson       |
		| Tempe           |
		| Pittsburgh      |
		| Chandler        |
		| Charlotte       |
		| Montréal        |
		| Madison         |
		| Gilbert         |
		| Mesa            |
		| Cleveland       |
		| North Las Vegas |
		| Edinburgh       |
		| Glendale        |
		| Lakewood        |
		| Cave Creek      |
		| Champaign       |
		| Markham         |
		| North York      |
		| Mississauga     |
		| Surprise        |
		| Avondale        |
		+-----------------+
		(Output limit exceeded, 25 of 67 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	
	/*To list the stars from BUSINESS along with number of business for Avon city*/
	
	select 		stars, count(*)
	from 		business
	where 		city = 'Avon'
	group by 	stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
	+-------+----------+
	| stars | count(*) |
	+-------+----------+
	|   1.5 |        1 |
	|   2.5 |        2 |
	|   3.5 |        3 |
	|   4.0 |        2 |
	|   4.5 |        1 |
	|   5.0 |        1 |
	+-------+----------+


ii. Beachwood

SQL code used to arrive at answer:
	
	/*To list the stars from BUSINESS along with number of business for Beachwood city*/

	select 		stars, count(*)
	from 		business 
	where 		city = 'Beachwood'
	group by 	stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
	+-------+----------+
	| stars | count(*) |
	+-------+----------+
	|   2.0 |        1 |
	|   2.5 |        1 |
	|   3.0 |        2 |
	|   3.5 |        2 |
	|   4.0 |        1 |
	|   4.5 |        2 |
	|   5.0 |        5 |
	+-------+----------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
		
		select 		name, review_count 
		from 		user
		order by 	review_count DESC
		limit 		3
	
		
	Copy and Paste the Result Below:
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	Ans: Yes. Probability of having more reviews increase if user has more fans. But few exceptional cases are also seen where users with less fans 	     are seen to have more review count. This analysis has been predicted from the two tables shown below. 
		1. Table 1 users such as Gerald, William, Harald, Mini, Christine also hold top positions in Table 2 for review COUNT
		2. We also see users like Sara, Yuri, .Hon, eric in Table 2 who have very less number of fans but still have achieved to get more reviews
		3. Overall trend seen in the Table 1 shows that with decrease in fans, graph for reviews also starts decreasing.
		
		
		+-----------+--------------+------+								+-----------+--------------+------+
		| name      | review_count | fans |								| name      | review_count | fans |
		+-----------+--------------+------+								+-----------+--------------+------+
		| Amy       |          609 |  503 |								| Gerald    |         2000 |  253 |
		| Mimi      |          968 |  497 |								| Sara      |         1629 |   50 |
		| Harald    |         1153 |  311 |								| Yuri      |         1339 |   76 |
		| Gerald    |         2000 |  253 |								| .Hon      |         1246 |  101 |
		| Christine |          930 |  173 |								| William   |         1215 |  126 |
		| Lisa      |          813 |  159 |								| Harald    |         1153 |  311 |
		| Cat       |          377 |  133 |								| eric      |         1116 |   16 |
		| William   |         1215 |  126 |								| Roanna    |         1039 |  104 |
		| Fran      |          862 |  124 |								| Mimi      |          968 |  497 |
		| Lissa     |          834 |  120 |								| Christine |          930 |  173 |
		| Mark      |          861 |  115 | 							+-----------+--------------+------+	
		| Tiffany   |          408 |  111 | 								Table 2: Users with Max reviews
		| bernice   |          255 |  105 | 
		| Roanna    |         1039 |  104 | 
		| Angela    |          694 |  101 | 
		| .Hon      |         1246 |  101 |
		| Ben       |          307 |   96 | 
		| Ben       |          307 |   96 | 
		| Linda     |          584 |   89 |
		| Christina |          842 |   85 | 	
		+-----------+--------------+------+										
		Table 1: Users with Max fans									
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews are seen with the word "love".

	
	SQL code used to arrive at answer:
	
		select 	count(*) 
		from 	review 
		where 	text like '%love%'  /*result => 1780*/
		
		select 	count(*) 
		from 	review 
		where 	text like '%hate%'  /*result => 232*/

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
		
		select 		name, fans 
		from 		user
		order by 	fans DESC
		limit 		10
	
	
	Copy and Paste the Result Below:
	
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Ans : 	Yes.
		The group with star rating 2.0 to 3.0 has 14hrs range
		The group with star rating 4.0 to 5.0 has 8hrs (4.5 star) and 9hrs (5.0 star) range


ii. Do the two groups you chose to analyze have a different number of reviews?
Ans : 	No.
		The group with star rating 2.0 to 3.0 has no reviews for category = SHOPPING
		The group with star rating 4.0 to 5.0 has no reviews for category = SHOPPING
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Ans : 	Yes.
		The group with star rating 2.0 to 3.0 has Walgreens (Drugstore chain) probably becasuse location is far away from the Las Vegas Beltway and therefore it is less accessible
		The group with star rating 4.0 to 5.0 has Red Rock Canyon Visitor Center and Desert Medical Equipment because
			- Red Rock Canyon Visitor Center is inside Red Rock Canyon National Conservationa area which seems to be a tourist place
			- Desert Medical Equipment is very near to Las Vegas Beltway and inside shopping complex
		

SQL code used for analysis:

	/* 1.i  City choosed = Las Vegas
			Category = Shopping
			Star rating range = 2.0 to 3.0 */

	select 		b.name, 
				c.category, 
				b.stars, 
				h.hours, 
				substr(h.hours,-5) - substr(h.hours,-10,4) as hours_range
				
	from 		business as b
	inner join 	category as c on c.business_id = b.id
	inner join 	hours as h on h.business_id = b.id
	
	where 		(b.city = 'Las Vegas') and (c.category = 'Shopping') and (b.stars between 2.0 and 3.0)
	
	/*OUTPUT => */ 	
		
	+-----------+----------+-------+----------------------+-------------+
	| name      | category | stars | hours                | hours_range |
	+-----------+----------+-------+----------------------+-------------+
	| Walgreens | Shopping |   2.5 | Monday|8:00-22:00    |          14 |
	| Walgreens | Shopping |   2.5 | Tuesday|8:00-22:00   |          14 |
	| Walgreens | Shopping |   2.5 | Friday|8:00-22:00    |          14 |
	| Walgreens | Shopping |   2.5 | Wednesday|8:00-22:00 |          14 |
	| Walgreens | Shopping |   2.5 | Thursday|8:00-22:00  |          14 |
	| Walgreens | Shopping |   2.5 | Sunday|8:00-22:00    |          14 |
	| Walgreens | Shopping |   2.5 | Saturday|8:00-22:00  |          14 |
	+-----------+----------+-------+----------------------+-------------+
	
	
	/*  City choosed = Las Vegas
		Category = Shopping
		Star rating range = 4.0 to 5.0 */
			
	select 		b.name, 
				c.category, 
				b.stars, 
				h.hours, 
				substr(h.hours,-5) - substr(h.hours,-10,4) as hours_range
	
	from 		business as b
	inner join 	category as c on c.business_id = b.id
	inner join 	hours as h on h.business_id = b.id
	
	where 		(b.city = 'Las Vegas') and (c.category = 'Shopping') and (b.stars between 4.0 and 5.0)
	
	/*OUTPUT => */ 
	
	+--------------------------------+----------+-------+----------------------+-------------+
	| name                           | category | stars | hours                | hours_range |
	+--------------------------------+----------+-------+----------------------+-------------+
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Monday|8:00-16:30    |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Tuesday|8:00-16:30   |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Friday|8:00-16:30    |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Wednesday|8:00-16:30 |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Thursday|8:00-16:30  |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Sunday|8:00-16:30    |           8 |
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Saturday|8:00-16:30  |           8 |
	| Desert Medical Equipment       | Shopping |   5.0 | Friday|8:00-17:00    |           9 |
	| Desert Medical Equipment       | Shopping |   5.0 | Tuesday|8:00-17:00   |           9 |
	| Desert Medical Equipment       | Shopping |   5.0 | Thursday|8:00-17:00  |           9 |
	| Desert Medical Equipment       | Shopping |   5.0 | Wednesday|8:00-17:00 |           9 |
	| Desert Medical Equipment       | Shopping |   5.0 | Monday|8:00-17:00    |           9 |
	+--------------------------------+----------+-------+----------------------+-------------+
	
	
	
	/* 1.ii TO LIST DOWN CATEGORY, STARS, HOURS AND CALCULATE DISTRIBUTION OF HOURS FOR EACH STAR RANGE */
	select  	c.category, 
				b.name, 
				b.stars, 
				count(r.id)
			
	from 		business as b	
	inner join 	category as c on b.id = c.business_id 
	inner join 	review as r on r.business_id = b.id

	where b.city = 'Las Vegas' and (b.stars between 4.0 and 5.0)			/*Output => 2 */
	group by c.category
	
	
		
	select  	c.category, 
				b.name, 
				b.stars, 
				count(r.id)
	
	from 		business as b
	inner join 	category as c on b.id = c.business_id 
	inner join 	review as r on r.business_id = b.id

	where b.city = 'Las Vegas' and (b.stars between 2.0 and 3.0)			/*Output => 0 */
	group by c.category
	
	
	/* 1.iii TO LIST DOWN CATEGORY, STARS, HOURS AND CALCULATE DISTRIBUTION OF HOURS FOR EACH STAR RANGE */
	
	/*Category 1 : 2.0 to 3.0*/
	select 		b.name, 
				c.category, 
				b.stars, 
				b.city, 
				b.state, 
				b.postal_code, 
				b.latitude, 
				b.longitude
				
	from 		business as b
	inner join 	category as c on c.business_id = b.id
	
	where 		(b.city = 'Las Vegas') and (c.category = 'Shopping') and (b.stars between 2.0 and 3.0)
			
	/*Output =>*/
	+-----------+----------+-------+-----------+-------+-------------+----------+-----------+
	| name      | category | stars | city      | state | postal_code | latitude | longitude |
	+-----------+----------+-------+-----------+-------+-------------+----------+-----------+
	| Walgreens | Shopping |   2.5 | Las Vegas | NV    | 89121       |  36.1007 |  -115.091 |
	+-----------+----------+-------+-----------+-------+-------------+----------+-----------+
	
	/*Category 1 : 4.0 to 5.0*/
	select 		b.name, 
				c.category, 
				b.stars, 
				b.city, 
				b.state, 
				b.postal_code, 
				b.latitude, 
				b.longitude
				
	from 		business as b
	inner join 	category as c on c.business_id = b.id
	
	where 		(b.city = 'Las Vegas') and (c.category = 'Shopping') and (b.stars between 4.0 and 5.0)
			
	/*Output =>*/
	+--------------------------------+----------+-------+-----------+-------+-------------+----------+-----------+
	| name                           | category | stars | city      | state | postal_code | latitude | longitude |
	+--------------------------------+----------+-------+-----------+-------+-------------+----------+-----------+
	| Red Rock Canyon Visitor Center | Shopping |   4.5 | Las Vegas | NV    | 89161       |  36.1357 |  -115.428 |
	| Desert Medical Equipment       | Shopping |   5.0 | Las Vegas | NV    | 89118       |  36.0964 |  -115.187 |
	+--------------------------------+----------+-------+-----------+-------+-------------+----------+-----------+
	
	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: The list of states which have all the businesses currently open is ['C','ESX','FIF','NY','NYK','ST','WLN']
		
         
         
ii. Difference 2: Out of 86 Businesses which have defined attributes,
					Closed Business Attribute share = 16.9% [count = 14]
					Open Business Attribute share = 83% [count = 73]
         
         
SQL code used for analysis:
	/*Difference 1 : States with no closed businesses*/

	/*Step 1*/							/*Step 2*/
	select 		state, count(state)		select 		state, count(state)
	from 		business				from 		business
	where 		is_open = 0				where 		is_open = 1
	group by 	state					group by 	state
	
	+-------+--------------+		+-------+--------------+
	| state | count(state) |		| state | count(state) |
	+-------+--------------+		+-------+--------------+
	| AZ    |          452 |		| AZ    |         2590 |
	| BW    |           21 |		| BW    |          181 |
	| EDH   |           51 |		| EDH   |          186 |
	| ELN   |            2 |		| ELN   |            4 |
	| HLD   |            1 |		| HLD   |           11 |
	| IL    |           14 |		| IL    |           94 |
	| MLN   |            3 |		| MLN   |            5 |
	| NC    |           96 |		| NC    |          626 |
	| NI    |            1 |		| NI    |            1 |
	| NV    |          300 |		| NV    |         1621 |
	| OH    |          102 |		| OH    |          645 |
	| ON    |          281 |		| ON    |         1383 |
	| PA    |           90 |		| PA    |          463 |
	| QC    |           69 |		| QC    |          396 |
	| SC    |            8 |		| SC    |           31 |
	| WI    |           29 |		| WI    |          224 |
	+-------+--------------+		| C     |            3 |
	Step 1 results					| ESX   |            1 |
									| FIF   |            5 |
									| NY    |            3 |
									| NYK   |            3 |
									| ST    |            2 |
									| WLN   |            2 |
									+-------+--------------+
									Step 2 results
	
	select 		name, city, review_count, stars 
	from 		business
	where 		is_open = 1 and state in ('C','ESX','FIF','NY','NYK','ST','WLN')
	order by 	city	


/*Difference 2 : Attribute share for Open and Closed Businesses*/
	
	/*Step 1 : Get total count of Businesses having attributes = 86*/
	select 		b.name, count(a.name)
	from 		business as b
	inner join 	attribute as a on a.business_id = b.id 
	group by 	b.name
	order by 	count(a.name) DESC

	/*Step 2 : Open Businesses having attributes = 72*/
	select 		b.name, count(a.name)
	from 		business as b
	inner join 	attribute as a on a.business_id = b.id 
	where 		is_open = 1
	group by 	b.name
	order by 	count(a.name) DESC
	
	/*Step 1 : Closed Businesses having attributes = 14*/
	select 		b.name, count(a.name)
	from 		business as b
	inner join 	attribute as a on a.business_id = b.id 
	where 		is_open = 0
	group by 	b.name
	order by 	count(a.name) DESC



	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: 

		To predict the users who can become an elite member in Yelp community
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	
		To identify qualities of a elite member, the tables like User and Elite_years have been used. Below listed are the parameters taken into consideration to become an elite member:
			1. Count of Reviews
			2. Years of yelping experience
			3. Useful review count
			4. Funny review count
			5. Cool review count
			6. Number of fans
			7. Average stars
		[Note: Friends and Reviews not considered due to shortage of elite users data available in all these tables] 
                           
                  
iii. Output of your finished dataset: 

	List of users who have higher chances of getting the Elite membership in Yelp community 

	+-----------+--------------+----------+---------------------+--------+-------+------+------+---------------+
	| name      | review_count | yelp_exp | yelping_since       | useful | funny | cool | fans | average_stars |
	+-----------+--------------+----------+---------------------+--------+-------+------+------+---------------+
	| Daniel    |          301 |       13 | 2009-02-13 00:00:00 |    319 |   117 |  193 |   26 |          3.79 |
	| Ben       |          307 |       15 | 2007-03-10 00:00:00 |   1180 |  1155 | 1143 |   96 |           3.7 |
	| Andy      |          324 |       16 | 2006-01-25 00:00:00 |    260 |   242 |  204 |   26 |          4.09 |
	| Princeton |          376 |       13 | 2009-03-04 00:00:00 |   1594 |   945 | 1114 |   64 |          4.15 |
	| Cat       |          377 |       13 | 2009-02-05 00:00:00 |   1062 |   672 | 1076 |  133 |          3.99 |
	| Steven    |          400 |       12 | 2010-03-11 00:00:00 |   2502 |  2556 | 2419 |   35 |          3.54 |
	| Greg      |          408 |       14 | 2008-02-16 00:00:00 |    820 |   753 |  746 |   81 |          3.67 |
	| Tiffany   |          408 |       14 | 2008-10-28 00:00:00 |   1366 |   984 | 1279 |  111 |          4.09 |
	| Matt      |          446 |       13 | 2009-02-26 00:00:00 |   2683 |  1600 |  689 |   45 |          3.63 |
	| Quisha    |          481 |       13 | 2009-11-27 00:00:00 |    689 |   300 |  575 |   58 |          3.66 |
	| Lynda     |          483 |       16 | 2006-02-12 00:00:00 |    510 |   127 |  116 |   34 |          3.72 |
	| Sharon    |          498 |       15 | 2007-06-10 00:00:00 |    260 |   227 |  238 |   56 |          3.89 |
	| Kristina  |          570 |       11 | 2011-02-22 00:00:00 |    267 |   150 |  103 |   45 |          3.87 |
	| Linda     |          584 |       17 | 2005-08-07 00:00:00 |   3177 |  2736 | 3019 |   89 |          4.06 |
	| Annie     |          651 |       17 | 2005-12-14 00:00:00 |    184 |    90 |  109 |   52 |           4.0 |
	| Joc       |          652 |       17 | 2005-09-03 00:00:00 |    472 |   654 |  606 |   49 |          3.71 |
	| Jenn      |          657 |       16 | 2006-05-20 00:00:00 |   1044 |   470 |  401 |   62 |          4.36 |
	| Jim       |          671 |       14 | 2008-04-09 00:00:00 |   3881 |  2913 | 5170 |   57 |          3.85 |
	| Lyn       |          675 |       13 | 2009-11-07 00:00:00 |   1539 |   125 |  609 |   45 |          4.06 |
	| Angela    |          694 |       12 | 2010-10-01 00:00:00 |    158 |   164 |  105 |  101 |          3.89 |
	| Tim       |          702 |       13 | 2009-01-21 00:00:00 |   2252 |  1186 | 1859 |   35 |          3.66 |
	| Alison    |          775 |       15 | 2007-07-02 00:00:00 |    300 |   302 |  245 |   61 |          3.83 |
	| Lissa     |          834 |       15 | 2007-08-14 00:00:00 |    455 |   150 |  342 |  120 |          3.68 |
	| Ed        |          904 |       13 | 2009-08-10 00:00:00 |    141 |    88 |   85 |   38 |           3.6 |
	| Christine |          930 |       13 | 2009-07-08 00:00:00 |   4834 |  6646 | 4321 |  173 |          3.69 |
	+-----------+--------------+----------+---------------------+--------+-------+------+------+---------------+
         
         
iv. Provide the SQL code you used to create your final dataset:++

/* Step 1 : Total elite members available in elite_years table = 21 */
	select 		u.name,
				u.review_count,
				(date('now') - date(u.yelping_since)) as yelp_exp, 
				u.yelping_since,
				u.useful,
				u.funny,
				u.cool,
				u.fans,
				u.average_Stars		
	from 		user as u 
	inner join 	elite_years as e on e.user_id = u.id
	group by 	u.name
	order by 	u.name

	/*Output =>*/
	+---------+--------------+----------+---------------------+--------+-------+------+------+---------------+
	| name    | review_count | yelp_exp | yelping_since       | useful | funny | cool | fans | average_stars |
	+---------+--------------+----------+---------------------+--------+-------+------+------+---------------+
	| Brad    |          182 |       12 | 2010-09-02 00:00:00 |    212 |    22 |    2 |    1 |          2.92 |
	| Chris   |           70 |       12 | 2010-02-18 00:00:00 |     57 |     7 |   11 |    2 |          3.49 |
	| Danial  |          136 |       16 | 2006-02-21 00:00:00 |     12 |     3 |    1 |    5 |          2.54 |
	| Dixie   |          503 |       11 | 2011-01-19 00:00:00 |     21 |    32 |   23 |   41 |          3.19 |
	| Dominic |          836 |       11 | 2011-02-06 00:00:00 |     81 |    26 |   52 |   37 |          3.47 |
	| Ed      |          904 |       13 | 2009-08-10 00:00:00 |    141 |    88 |   85 |   38 |           3.6 |
	| Elaine  |          332 |       12 | 2010-04-21 00:00:00 |     19 |    21 |   13 |   18 |          3.26 |
	| Jamie   |           95 |       12 | 2010-04-30 00:00:00 |     15 |     0 |    0 |    4 |          4.08 |
	| Jia     |          228 |       10 | 2012-06-22 00:00:00 |     24 |    28 |    1 |    8 |          3.36 |
	| Justin  |          177 |       10 | 2012-10-07 00:00:00 |     46 |    11 |    9 |   13 |          3.51 |
	| Keith   |           61 |        8 | 2014-06-26 00:00:00 |     17 |     2 |    0 |    3 |          3.84 |
	| Kristen |          428 |        7 | 2015-12-23 00:00:00 |     45 |    11 |    7 |   15 |          3.32 |
	| Lalena  |          224 |        8 | 2014-02-20 00:00:00 |    443 |   101 |  217 |   25 |          3.94 |
	| Lissa   |          834 |       15 | 2007-08-14 00:00:00 |    455 |   150 |  342 |  120 |          3.68 |
	| Matt    |          476 |       16 | 2006-10-11 00:00:00 |     42 |    15 |    0 |   14 |          3.77 |
	| Maung   |           54 |        7 | 2015-06-04 00:00:00 |      2 |     1 |    2 |    0 |          3.69 |
	| Mel     |          156 |       11 | 2011-04-30 00:00:00 |     92 |    32 |   32 |    9 |          3.78 |
	| Nieves  |          178 |        9 | 2013-07-08 00:00:00 |   1091 |   774 |  940 |   80 |          3.64 |
	| Sapna   |           38 |        5 | 2017-01-13 00:00:00 |      0 |     0 |    0 |    1 |          3.87 |
	| Tasha   |          250 |       10 | 2012-02-04 00:00:00 |    106 |    11 |   12 |    8 |          3.81 |
	| Tracy   |           71 |        8 | 2014-02-23 00:00:00 |      6 |     4 |    1 |    5 |          3.32 |
	+---------+--------------+----------+---------------------+--------+-------+------+------+---------------+



/* Step 2 : Calculate Average for all parameters fetched above*/

	/* Average Review Count for elite members => 296.8 */
	select 	avg(SUBQUERY.review_count)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY

	/* Average Yelp Experience for elite members => 10.6 */
	select 	avg(SUBQUERY.yelp_exp)
	from 	(   select 		*, (date('now') - date(u.yelping_since)) as yelp_exp
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY 

	/* Average Count for Useful reviews for elite members => 139.3 */
	select 	avg(SUBQUERY.useful)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY

	/* Average Count for Funny reviews for elite members => 63.8 */
	select 	avg(SUBQUERY.funny)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY

	/* Average Count for Cool reviews for elite members => 83.3 */
	select 	avg(SUBQUERY.cool)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY
				
	/* Average Fans for elite members => 21.3 */
	select 	avg(SUBQUERY.fans)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY

	/* Round up of Average Stars for each elite member => 3.5 */
	select 	avg(SUBQUERY.average_stars)
	from 	(   select 		*		
				from 		user as u 
				inner join 	elite_years as e on e.user_id = u.id
				group by 	u.name
				order by 	u.name) as SUBQUERY
				
				

/* Step 3 : Search for users with above average result for the parameters taken into consideration */

	select 		u.name,
				u.review_count,
				(date('now') - date(u.yelping_since)) as yelp_exp, 
				u.yelping_since,
				u.useful,
				u.funny,
				u.cool,
				u.fans,
				u.average_Stars
	from 		user as u 
	where 		review_count>=296.8 and yelp_exp>=10.6 and useful>=139.3 and funny>=63.8 and cool>=83.3 and fans>=21.3 and average_Stars>=3.5
	order by 	review_count

